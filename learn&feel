1. Data type
  字典(DICtionary)    {Key: Value}    可以尋找字典中是否存在你需要的key(key in dic)  呼叫: dic[key]  刪除: del dic[key] 加入: 直覺
                                     做任何事都要經過key!

  List   [1, 3, 'abc', 7, "july"]    用[]括起來，內部資料型態不限制，位置計量方式與陣列相同

2. [x, y]
  在python中表示從第x到第y-1的陣列
  
3. for迴圈、while
  for i in range(10, 0, -1):    #從10開始每一次降1降到0為止，0沒有跳到
    print(i)
  
  i=10
  while i>0:
    print(i)
    i-=1
    
4. 函數function
  def function_name(paragraph list):
    ...
    (return a)
    
5. 類別class  #__init__
  class class_name:
    class_object
    def method_name(self):
      self.instance
      ...
  ex. class test:
        def test1(self, a=10, b=20):    #self: 預設參數 self變數屬於類別
          self.a=a
          self.b=b
          
        def do_something(self):
          return self.a+self.b
          
6. import // import, import as, from import  ex. 同路徑下count.py
  import count
  import count as cnt #以後用cnt呼叫count.py的內容
  from count import count_it #count_it 是count.py的函式
  
7. 套件: 目錄中放一個__init__.py檔，會視該目錄為一個套件，通常，__init__.py會是一個空白檔案  
  
8. super繼承: 當繼承對象改變時，需要改變的地方也變少，很方便
class a(object):
    def __init__(self):
        self.a=10
        print "from class a"
        
class b(a):
    def __init__(self):
        super(b, self).__init__()
        print "from class b"
        print self.a

b()
output: from class a
        from class b
        10

9. self在類別中當類別的區域變數，而一般在類別中宣告地的變數則是全域變數
ex.
class a(object):
    count=0
    g=6
    def __init__(self):
        self.app=10
        a.count+=1
        print a.count
    
    def dd(self):
        print "dd in a"
        self.app+=1
        print self.app

b=a()
c=a()
b.dd()
c.dd()

output:
1
2
dd in a
11
dd in a
11

